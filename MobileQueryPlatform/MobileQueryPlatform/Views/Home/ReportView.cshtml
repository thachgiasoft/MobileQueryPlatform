@Scripts.Render("~/bundles/datetimepickerJs")
@Styles.Render("~/bundles/datetimepickerCss")
@Styles.Render("~/bundles/less")

<script id="tempParamInputView" type="text/template">
    <label class="sr-only"><%=ParamName==''?ParamCode:ParamName%></label>
    <input class="form-control" type="text" placeholder="输入<%=ParamName==''? ParamCode:ParamName%>" />
</script>

<script id="tempParamListView" type="text/template">
    <label class="sr-only"><%=ParamName=""?ParamCode:ParamName%></label>
    <div class="input-group">
        <div class="btn-group">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <span class="showTxtBtn"><%=ParamName==""?ParamCode:ParamName%></span> <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" role="menu">
                <li class="clearBtn"><a href="#do">无条件</a></li>
                <% for(var j=0;j<=ParamItems.length-1;j++) {%>
                <li  class="selectBtn" data-index="<%=j%>"><a href="#do"><%=ParamItems[j].OptionName%></a></li>
                <%}%>
            </ul>
        </div>
    </div>
</script>

<script id="tempParamDatetimeView" type="text/template">
    <label for="<%=ParamCode%>" class="sr-only "><%=ParamName==''?ParamCode:ParamName%></label>
    <input type="hidden" id="<%=ParamCode%>" class="datetimeValue" value="" />
    <div class="input-group date form_datetime" data-link-field="<%=ParamCode%>">
        <input class="form-control datetimeLabel" size="18" placeholder="输入<%=ParamName==''?ParamCode:ParamName%>" type="text" value="" readonly>
        <span class="input-group-addon"><span class="glyphicon glyphicon-remove"></span></span>
        <span class="input-group-addon"><span class="glyphicon glyphicon-th"></span></span>
    </div>
</script>

<script type="text/template" id="tempReportHeader">
    <% for(var i=0 ;i<=data.length-1;i++) {%>
    <%if(data[i].Sortabled){%>
    <th data-index="<%=i%>" style="cursor:pointer">
        <% if(data[i].SortValue==0){%>
        <span class="glyphicon glyphicon-sort"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></span>
        <%} else if(data[i].SortValue==1){%>
        <% if(data[i].ColumnType==0) {%>
        <span class="glyphicon glyphicon-sort-by-alphabet"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></span>
        <%} else if(data[i].ColumnType==1){%>
        <span class="glyphicon glyphicon-sort-by-order"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></span>
        <%} else if(data[i].ColumnType==2){%>
        <span class="glyphicon glyphicon-sort-by-attributes"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></span>
        <%}%>

        <%} else if(data[i].SortValue==2){%>
        <% if(data[i].ColumnType==0) {%>
        <span class="glyphicon glyphicon-sort-by-alphabet-alt"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></span>
        <%} else if(data[i].ColumnType==1){%>
        <span class="glyphicon glyphicon-sort-by-order-alt"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></span>
        <%} else if(data[i].ColumnType==2){%>
        <span class="glyphicon glyphicon-sort-by-attributes-alt"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></span>
        <%}%>
        <%}%>
    </th>
    <%} else {%>
    <th data-index="<%=i%>" style="cursor:pointer"><span class="text-primary"><%=data[i].ColumnName==""?data[i].ColumnCode:data[i].ColumnName%></span></th>
    <% }%>
    <%}%>
</script>

<script type="text/template" id="tempReportBody">
    <tr>
        <td>1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
    </tr>
</script>

<script type="text/template" id="tempReportFooter">
    <tr>
        <td>页合计</td>
        <td></td>
        <td></td>
        <td></td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
    </tr>
    <tr>
        <td>总合计</td>
        <td></td>
        <td></td>
        <td></td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
        <td>colmn1</td>
    </tr>
</script>

<script id="tempReportPager" type="text/template">
    <center>
        <ul class="pagination">
            <li><a href="#prePage"><span class="glyphicon glyphicon-chevron-left"></span></a></li>
            <li><a href="#goHome"><span class="glyphicon glyphicon-home"></span></a></li>
            <li><a href="#nextPage"><span class="glyphicon glyphicon-chevron-right"></span></a></li>
        </ul>
    </center>
</script>

<script type="text/javascript">
    
    if (window.Report.Report == undefined) {
        window.Report.Report = Backbone.Model.extend({
            defaults: {
                "ID": null,
                "DBID": null,
                "ReportName": "",
                "Remark": "",
                "Columns": [],
                "Params": [],
                "PageSumabled": false,
                "AllSumabled": false,
                "Pagingabled": false,
                "PageSize": 10
            },
            idAttribute: "ID",
            urlRoot: "/api/Report"
        });
    }

    if (window.Report.Request == undefined) {
        window.Report.Request = Backbone.Model.extend({
            defaults: {
                ReportID: "@ViewBag.ReportID",
                Page: 1,
                Params: [],
                SortColumn: "",
                Desc:false
            }
        });
    }
    
    if (window.Report.ToolbarView == undefined) {
        window.Report.ToolbarView = Backbone.View.extend({
            events: {
                "click a":"btnClick"
            },
            btnClick: function (e) {
                switch ($(e.currentTarget).attr("data-action")) {
                    case "query":
                        $.post("/api/QueryReport",
                            request.toJSON(),
                            function (rst) {
                                if (rst.ResultStatus != 1) {
                                    alert(rst.ResultMessage);
                                    return;
                                }
                                reportResult = rst.ResultObj;
                                reportView.showQuery();
                            });
                    break;
                }
            }
        });
    }

    if (window.Report.ParamContainerView == undefined) {
        window.Report.ParamContainerView = Backbone.View.extend({
            initialize: function () {
                report.fetch({
                    data: {
                        id: "@ViewBag.ReportID",
                        forQuery: true
                    },
                    success: function (model, rst) {
                        $("#queryTitle").html(rst.ReportName);
                        request.set("Params", rst.Params);
                        paramContainerView.render();
                        $(".form_datetime").datetimepicker({
                            format: "yyyy-MM-dd hh:ii",
                            autoclose: true,
                            todayBtn: true,
                            todayHighlight: true,
                            language: "zh-CN"
                        });
                    },
                    error: function () {
                        alert("获取报表信息失败");
                    }
                });
            },
            render: function () {
                var params = request.get("Params");
                for (var i = 0; i < params.length; i++) {
                    switch (params[i].ParamType) {
                        case 0:
                        case 1:
                            switch (params[i].ParamInputType) {
                                case 0:
                                    this.$el.append(new window.Report.ParamInputView(params[i]).render());
                                    break;
                                case 1:
                                    this.$el.append(new window.Report.ParamListView(params[i]).render());
                                    break;
                            }
                            break;
                        case 2:
                            this.$el.append(new window.Report.ParamDatetimeView(params[i]).render());
                            break;
                    }
                    this.$el.append("&nbsp;&nbsp;&nbsp;")
                }
            },
            toggleShow: function () {
                this.$el.toggleClass("hide");
            }
        });
    }

    if (window.Report.ParamInputView == undefined) {
        window.Report.ParamInputView = Backbone.View.extend({
            tagName:"div",
            className:"form-group",
            template: _.template($("#tempParamInputView").html()),
            initialize:function(param){
                this.model=param;
            },
            render: function () {
                this.$el.html(this.template(this.model));
                return this.el;
            },
            event: {
                "change input":"valueChanged"
            },
            valueChanged: function () {
                this.model.ParamValue = this.$el.find("input").val();
            }
        });
    }
    
    if (window.Report.ParamListView == undefined) {
        window.Report.ParamListView = Backbone.View.extend({
            tagName: "div",
            className: "form-group",
            template: _.template($("#tempParamListView").html()),
            initialize:function(param){
                this.model = param;
            },
            render: function () {
                this.$el.html(this.template(this.model));
                return this.el;
            },
            showText: function (txt) {
                this.$el.find(".showTxtBtn").html(txt);
            },
            events: {
                "click .selectBtn": "selectValue",
                "click .clearBtn":"clearParam"
            },
            selectValue: function (e) {
                var index = $(e.currentTarget).attr("data-index");
                this.model.ParamValue = this.model.ParamItems[index].OptionValue;
                this.$el.find("li").removeClass("active");
                $(e.currentTarget).addClass("active");
                this.showText((this.model.ParamName == "" ? this.model.ParamCode : this.model.ParamName) + "--" + (this.model.ParamItems[index].OptionName));
            },
            clearParam: function () {
                this.model.ParamValue = null;
                this.$el.find("li").removeClass("active");
                this.showText(this.model.ParamName == "" ? this.model.ParamCode : this.model.ParamName);
            }
        });
    }
    
    if (window.Report.ParamDatetimeView == undefined) {
        window.Report.ParamDatetimeView = Backbone.View.extend({
            tagName: "div",
            className: "form-group",
            template: _.template($("#tempParamDatetimeView").html()),
            initialize:function(param){
                this.model = param;
            },
            render: function () {
                this.$el.html(this.template(this.model));
                return this.el;
            },
            events: {
                "change .datetimeLabel": "selectDatetime"
            },
            selectDatetime: function () {
                this.model.ParamValue = this.$el.find(".datetimeValue").val();
            }
        });
    }
    
    if (window.Report.ReportView == undefined) {
        window.Report.ReportView = Backbone.View.extend({
            template_header: _.template($("#tempReportHeader").html()),
            template_body: _.template($("#tempReportBody").html()),
            template_footer:_.template($("#tempReportFooter").html()),
            render: function () {
                this.$el(".reportHeader").html(this.template({ data: report.get("Columns") }));
            },
            showQuery: function () {
                console.info(reportResult);
            }
        });
    }

</script>

<script type="text/javascript">
    var report;
    var paramContainerView;
    var reportView;
    var reportResult;
    var toolbar;
    var request;
    $(function () {
        report = new window.Report.Report();
        request = new window.Report.Request();
        paramContainerView = new window.Report.ParamContainerView({
            el: "#paramContainerView",
        });
        reportView = new window.Report.ReportView({
            el: "#queryHeader"
        });
        toolbar = new window.Report.ToolbarView({
            el:"#toolbar"
        });
       
    })
</script>

<div class="container">
    <h2 class="text-info" id="queryTitle"></h2><a  class="btn btn-default btn-xs pull-right" href="#ToggleParamsContainer"><span id="toggleParamsIcon" class="glyphicon glyphicon-eye-open">&nbsp;</span></a>
    <hr />
    <div class="row">
        <form class="form-inline" role="form" id="paramContainerView" />
    </div>
    <div class="row" style="overflow-x:auto" id="reportView">
        <table class="table table-striped table-hover table-bordered">
            <thead>
                <tr class="reportHeader" style="position:relative" />
            </thead>
            <tbody class="reportBody" />
            <tfoot class="reportSum" />
        </table>
    </div>
    <div class="row" id="reportPagerView">

    </div>
</div>

<div class="navbar navbar-fixed-bottom">
    <div class="navbar-header">
        <div class="btn-group btn-group-lg btn-group-justified" id="toolbar">
            <a class="btn btn-default" data-action="query"><span class="glyphicon glyphicon-search"></span>查询</a>
        </div>
    </div>
</div> 